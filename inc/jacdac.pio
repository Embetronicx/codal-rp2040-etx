; NOTE: use LF for pio file
; pio implement of 1M baud uart for jacdac
; regenerate command:
; pioasm jacdac.pio jacdac.pio.h

.program jd_tx
.side_set 1 opt

  pull          side 1  [7] ;
  set x, 7      side 0  [7] ;
bitloop:
  out pins, 1               ;
  jmp x-- bitloop       [6] ;

% c-sdk {
#include "hardware/clocks.h"

static inline void jd_tx_program_init(PIO pio, uint sm, uint offset, uint pin, uint baud) {
  pio_sm_set_pins_with_mask(pio, sm, 1u << pin, 1u << pin);
  pio_sm_set_pindirs_with_mask(pio, sm, 1u << pin, 1u << pin);
  pio_gpio_init(pio, pin);

  pio_sm_config c = jd_tx_program_get_default_config(offset);
  sm_config_set_out_shift(&c, true, false, 32);

  sm_config_set_out_pins(&c, pin, 1);
  sm_config_set_sideset_pins(&c, pin);
  sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

  float div = (float)clock_get_hz(clk_sys) / (8 * baud);
  sm_config_set_clkdiv(&c, div);

  pio_sm_init(pio, sm, offset, &c);
  pio_sm_set_enabled(pio, sm, false); // enable when need
}

%}

.program jd_rx
  wait 0 pin 0            ;
  set x, 7          [10]  ;
bitloop:
  in pins, 1              ;
  jmp x-- bitloop   [6]   ;

% c-sdk {
static inline void jd_rx_program_init(PIO pio, uint sm, uint offset, uint pin, uint baud) {
  pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
  pio_gpio_init(pio, pin);
  gpio_pull_up(pin);

  pio_sm_config c = jd_rx_program_get_default_config(offset);
  sm_config_set_in_pins(&c, pin);

  sm_config_set_in_shift(&c, true, true, 8);
  sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

  float div = (float)clock_get_hz(clk_sys) / (8 * baud);
  sm_config_set_clkdiv(&c, div);
  
  pio_sm_init(pio, sm, offset, &c);
  pio_sm_set_enabled(pio, sm, false); // enable when need
}

%}


