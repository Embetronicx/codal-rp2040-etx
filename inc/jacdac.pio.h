// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----- //
// jd_tx //
// ----- //

#define jd_tx_wrap_target 0
#define jd_tx_wrap 3

static const uint16_t jd_tx_program_instructions[] = {
            //     .wrap_target
    0x9fa0, //  0: pull   block           side 1 [7] 
    0xf727, //  1: set    x, 7            side 0 [7] 
    0x6001, //  2: out    pins, 1                    
    0x0642, //  3: jmp    x--, 2                 [6] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program jd_tx_program = {
    .instructions = jd_tx_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config jd_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + jd_tx_wrap_target, offset + jd_tx_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

#include "hardware/clocks.h"
static inline void jd_tx_program_init(PIO pio, uint sm, uint offset, uint pin, uint baud) {
  pio_sm_set_pins_with_mask(pio, sm, 1u << pin, 1u << pin);
  pio_sm_set_pindirs_with_mask(pio, sm, 1u << pin, 1u << pin);
  pio_gpio_init(pio, pin);
  pio_sm_config c = jd_tx_program_get_default_config(offset);
  sm_config_set_out_shift(&c, true, false, 32);
  sm_config_set_out_pins(&c, pin, 1);
  sm_config_set_sideset_pins(&c, pin);
  sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
  float div = (float)clock_get_hz(clk_sys) / (8 * baud);
  sm_config_set_clkdiv(&c, div);
  pio_sm_init(pio, sm, offset, &c);
  pio_sm_set_enabled(pio, sm, false); // enable when need
}

#endif

// ----- //
// jd_rx //
// ----- //

#define jd_rx_wrap_target 0
#define jd_rx_wrap 3

static const uint16_t jd_rx_program_instructions[] = {
            //     .wrap_target
    0x2020, //  0: wait   0 pin, 0                   
    0xea27, //  1: set    x, 7                   [10]
    0x4001, //  2: in     pins, 1                    
    0x0642, //  3: jmp    x--, 2                 [6] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program jd_rx_program = {
    .instructions = jd_rx_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config jd_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + jd_rx_wrap_target, offset + jd_rx_wrap);
    return c;
}

static inline void jd_rx_program_init(PIO pio, uint sm, uint offset, uint pin, uint baud) {
  pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
  pio_gpio_init(pio, pin);
  gpio_pull_up(pin);
  pio_sm_config c = jd_rx_program_get_default_config(offset);
  sm_config_set_in_pins(&c, pin);
  sm_config_set_in_shift(&c, true, true, 8);
  sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
  float div = (float)clock_get_hz(clk_sys) / (8 * baud);
  sm_config_set_clkdiv(&c, div);
  pio_sm_init(pio, sm, offset, &c);
  pio_sm_set_enabled(pio, sm, false); // enable when need
}

#endif

